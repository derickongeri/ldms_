"""
Django settings for oss_ldms project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
import os
from pathlib import Path
from corsheaders.defaults import default_headers

from glob import glob

from datetime import timedelta

# os.environ.setdefault("DJANGO_SETTINGS_MODULE", __file__)
# os.environ.setdefault("DJANGO_SETTINGS_MODULE", "oss_ldms.settings")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/


SECRET_KEY = os.environ.get('SECRET_KEY', '=1gqht%@-d+i!!&kxtakpfw!g+q#t)4+!@e3)e*zw)mlj8oo9@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", default=1))

# ALLOWED_HOSTS = ["*"]# ["0.0.0.0", "127.0.0.1", ".ngrok.io", "172.105.246.124"]

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "41.227.30.139 10.1.60.103 10.1.60.101 172.105.246.124 0.0.0.0 localhost 127.0.0.1 [::1]").split(" ")

# Application definition

INSTALLED_APPS = [   
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'corsheaders',
    'rest_framework',
    'rest_framework_gis',
    'user',
    'leaflet',
    'django_filters',
    'raster',
    'django_rq',
    'ldms',   
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'oss_ldms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'oss_ldms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
        'default': {
            # 'ENGINE': 'django.db.backends.sqlite3',
            # 'NAME': BASE_DIR / 'db.sqlite3',
            'ENGINE': os.environ.get("DB_ENGINE", "django.contrib.gis.db.backends.postgis"),
            'NAME': os.environ.get("DB_NAME", "oss_ldms"), # os.path.join(BASE_DIR, 'db.sqlite3')),
            'USER': os.environ.get("DB_USER", "ldms_user"),
            'PASSWORD': os.environ.get("DB_PASSWORD", "ldms123"),
            'HOST': os.environ.get("DB_HOST", "localhost"),
            'PORT': os.environ.get("DB_PORT", "5432"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, "media/")
MEDIA_URL = "/media/"

CORS_ORIGIN_ALLOW_ALL = True
# we whitelist localhost:3000 or 3001 because that's where frontend will be served
# CORS_ORIGIN_WHITELIST = [
#         'http://localhost:3001',
#         'https://localhost:3001',
#     ]

# Enable asynchronous raster data parsing by django-raster
RASTER_USE_CELERY = False 

# Setup GDAL and GEOS gis library values to take care of Alpine docker image
# GDAL_LIBRARY_PATH=glob('/usr/lib/libgdal.so.*')[0]
# GEOS_LIBRARY_PATH=glob('/usr/lib/libgeos_c.so.*')[0]


# DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520 #20MB

DEFAULT_NODATA = 255
MIN_INT = -9223372036854775807
MAX_INT = 9223372036854775807 

AUTH_USER_MODEL = 'user.CustomUser'
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
        ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.IsAdminUser',
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'user.backends.JWTAuthentication',
        # for browsable api view usage
        # 'rest_framework.authentication.SessionAuthentication', 
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', #generate API Docs
}

# Jwt Authentication
# https://github.com/jpadilla/django-rest-framework-jwt/blob/master/rest_framework_jwt/settings.py
JWT_AUTH = {
  'JWT_ENCODE_HANDLER': 'rest_framework_jwt.utils.jwt_encode_handler',
  'JWT_DECODE_HANDLER': 'rest_framework_jwt.utils.jwt_decode_handler',
  'JWT_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_payload_handler',
  'JWT_PAYLOAD_GET_USER_ID_HANDLER': 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',
  'JWT_RESPONSE_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_response_payload_handler',
 
#   'JWT_SECRET_KEY': 'SECRET_KEY',
#   'JWT_GET_USER_SECRET_KEY': None,
#   'JWT_PUBLIC_KEY': None,
#   'JWT_PRIVATE_KEY': None,
#   'JWT_ALGORITHM': 'HS256',
#   'JWT_VERIFY': True,
#   'JWT_VERIFY_EXPIRATION': True,
#   'JWT_LEEWAY': 0,
   'JWT_EXPIRATION_DELTA': timedelta(days=30),
#   'JWT_AUDIENCE': None,
#   'JWT_ISSUER': None,
   'JWT_ALLOW_REFRESH': False,
   'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=30),
#   'JWT_AUTH_HEADER_PREFIX': 'Bearer',
#   'JWT_AUTH_COOKIE': None,
}

# ENABLE_EMAIL_ACTIVATION = False
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
MAILER_EMAIL_BACKEND = EMAIL_BACKEND
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_PASSWORD = 'ghiplmngwljiywuc' Misland#2020
EMAIL_HOST_USER = 'stevenyaga@gmail.com'
# # EMAIL_PORT = 465
# # EMAIL_USE_SSL = True
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_ACTIVATE_SUBJECT = "Confirm your account"
EMAIL_ACTIVATE_ACCOUNT_TEMPLATE = 'activate_account.html'
EMAIL_PAGE_DOMAIN = "http://35.224.7.89/"

# for caching
# https://www.imagescape.com/blog/2018/12/21/django-rq-setup-guide/
# https://github.com/rq/django-rq
# http://peter-hoffmann.com/2012/python-simple-queue-redis-queue.html

# CACHES = {
#     'default': {
#         'BACKEND': 'redis_cache.cache.RedisCache',
#         'LOCATION': 'localhost:6379:1',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#             'MAX_ENTRIES': 5000,
#         }
#     }
# }
CACHES = {
    'default':{
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'ldms_cache', # table to store cache, run python manage.py createcachetable
    }
}

RQ_QUEUES = {
    # 'default': {
    #     'USE_REDIS_CACHE': 'default'
    # }
    'default': {
        'HOST': os.getenv('REDIS_HOST', 'localhost'),
        'PORT': 6379,
        'DB': 0, #first database
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': 500,
    },
    'high': {
        'URL': os.getenv('REDISTOGO_URL', 'redis://localhost'),
        'DEFAULT_TIMEOUT': 5000,
    },
    'low': {
        'HOST': os.getenv('REDIS_HOST', 'localhost'),
        'PORT': 6379,
        'DB': 0,
        # 'PASSWORD': 'ldms123',
        'DEFAULT_TIMEOUT': 200,
    }
}

# Add a logger for rq_scheduler in order to display when jobs are queueud
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },

    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'rq_scheduler': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Geoserver
GEOSERVER_HOST = os.getenv('GEOSERVER_HOST', 'http://0.0.0.0')# 'http://127.0.0.1:8080/geoserver')
GEOSERVER_PORT = os.getenv('GEOSERVER_PORT', 8600)
GEOSERVER_USERNAME = os.getenv('GEOSERVER_USERNAME', 'admin')
GEOSERVER_PASSWORD = os.getenv('GEOSERVER_PASSWORD', 'geoserver')#'myawesomegeoserver')#

# nodata placeholder key in sld file
NODATA_PLACEHOLDER = "{NODATA}"
